#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* insert_beg(struct node* head, int value) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = value;
    newnode->link = head;
    head = newnode;
    return head;
}

struct node* insert_end(struct node* head, int value) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = value;
    newnode->link = NULL;
    if (head == NULL) return newnode;
    struct node* ptr = head;
    while (ptr->link != NULL) {
        ptr = ptr->link;
    }
    ptr->link = newnode;
    return head;
}

struct node* insert_pos(struct node* head, int value, int pos) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = value;
    if (pos == 1) {
        newnode->link = head;
        head = newnode;
        return head;
    }
    struct node* temp = head;
    int i = 1;
    while (temp != NULL && i < pos - 1) {
        temp = temp->link;
        i++;
    }
    if (temp == NULL) {
        printf("Position not found\n");
        free(newnode);
        return head;
    }
    newnode->link = temp->link;
    temp->link = newnode;
    return head;
}

void display(struct node* head) {
    struct node* ptr1 = head;
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }
    while (ptr1 != NULL) {
        printf("%d -> ", ptr1->data);
        ptr1 = ptr1->link;
    }
    printf("NULL\n");
}

int main() {
    struct node* head = NULL;
    int choice, val, pos;
    while (1) {
        printf("\n---- MENU ----\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert at end\n");
        printf("3. Insert at specific position\n");
        printf("4. Display list\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &val);
                head = insert_beg(head, val);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &val);
                head = insert_end(head, val);
                break;
            case 3:
                printf("Enter value: ");
                scanf("%d", &val);
                printf("Enter position: ");
                scanf("%d", &pos);
                head = insert_pos(head, val, pos);
                break;
            case 4:
                display(head);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0; }
OUTPUT:
---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 1
Enter value: 10
List: 10 -> NULL

---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 2
Enter value: 20
List: 10 -> 20 -> NULL

---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 1
Enter value: 5
List: 5 -> 10 -> 20 -> NULL

---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 3
Enter value: 15
Enter position: 3
List: 5 -> 10 -> 15 -> 20 -> NULL

---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 4
5 -> 10 -> 15 -> 20 -> NULL

---- MENU ----
1. Insert at beginning
2. Insert at end
3. Insert at specific position
4. Display list
5. Exit
Enter your choice: 5

